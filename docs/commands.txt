print
    - Print all items in the top list of the stack.
    - Usage
        ["HelloWorld!"] print
        # HelloWorld!
        
        ["abc" "123"] print
        # abc123

        [<a> "test"]
        [<a>] print
        # test

println
    - Print all items in the top list on the stack with a newline after each one.
    - Usage
        ["HelloWorld!"] println
        # HelloWorld!
        # 

        ["abc" "123"] println
        # abc
        # 123

        [<a> "test"]
        [<a>] println
        # test
        #

input
    - Push a list containing the user's input.
    - Usage
        input

print-stack
    - Print the contents of the stack.
    - Usage
        [<a> 1 2 3]
        print-stack
        # 0 : [
        # 1 : <a>
        # 2 : 1
        # 3 : 2
        # 4 : 3

drop
    - Drop the last item of the top list off the stack.
    - Usage
        ["a" "b" "c"] drop println
        # a
        # b

drop-list
    - Drop the top list off the stack.
    - Usage
        [1 2 3] [4 5 6]
        drop-list
        println
        # 1
        # 2
        # 3

at
    - Push a list containing the position of the first element after a tag on the stack.
    - Usage
        [<a> "abc"] [<a>] at println
        # 2

get
    - Push a list containing the value stored at a specific position on the stack.
    - Usage
        ["ichi" "ni" "san"]
        [2] get println
        # ni
        #

        [<val> "a" "b" "c"]
        [<val>] at get println
        # a
        #

get-list
    - Push a copy of the list starting with the provided tag.

merge
    - Concatenate the top two lists.

int
    - Convert the provided numbers to integers.

if
    - Execute the following block if the list provided is equal to [true].

?
    - Execute the following block if the command or operator before it, throws an exception.

loop
    - Execute the following block a specific number of times.

while
    - Execute the following block while the last item in the provided list is true.

for
    - Execute the following block while the count is not equal to the target number.

defunc
    - Use the cashed user function token to define the starting point of a function.

$
    - Cash the next token and skip to the one after it.

return
    - Return from the function being executed and return a list if one is provided.

end
    - End a block of code.

exit
    - Stop the program's execution and exit.

