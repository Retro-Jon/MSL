print
    - Print all items in the top list of the stack.
    - Usage
        ["HelloWorld!"] print
        # HelloWorld!
        
        ["abc" "123"] print
        # abc123

        [<a> "test"]
        [<a>] print
        # test

println
    - Print all items in the top list on the stack with a newline after each one.
    - Usage
        ["HelloWorld!"] println
        # HelloWorld!

        ["abc" "123"] println
        # abc
        # 12
        [<a> "test"]
        [<a>] println
        # test

input
    - Push a list containing the user's input.
    - Usage
        input

print-stack
    - Print the contents of the stack.
    - Usage
        [<a> 1 2 3]
        print-stack
        # 0 : [
        # 1 : <a>
        # 2 : 1
        # 3 : 2
        # 4 : 3

drop
    - Drop the last item of the top list off the stack.
    - Usage
        ["a" "b" "c"] drop println
        # a
        # b

drop-list
    - Drop the top list off the stack.
    - Usage
        [1 2 3] [4 5 6]
        drop-list
        println
        # 1
        # 2
        # 3

at
    - Push a list containing the position of the first element after a tag on the stack.
    - Usage
        [<a> "abc"] [<a>] at println
        # 2

get
    - Push a list containing the value stored at a specific position on the stack.
    - Usage
        ["ichi" "ni" "san"]
        [2] get println
        # ni

        [<val> "a" "b" "c"]
        [<val>] at get println
        # a

get-list
    - Push a copy of the list starting at a specific position on the stack and ending when the start of another list is found or another tag.
    - Usage
        [<a> 1 2 3]
        [<a>] at get-list println
        # 1
        # 2
        # 3

merge
    - Concatenate the top two lists.
    - Usage
        [1 2 3] [4 5 6] merge println
        # 1
        # 2
        # 3
        # 4
        # 5
        # 6

int
    - Convert the provided numbers to integers.
    - Usage
        [3.14] int println
        # 3

if
    - Execute the following block if the list provided is equal to [true].
    - Usage
        [true] if
            ["True"] println
        end
        [false] if
            ["False"] println
        end
        # True

?
    - Execute the following block if the command or operator before it, throws an exception.
    - Usage
        [2 "a"] + ?
            print
        end
        # Value types do not agree.

loop
    - Execute the following block a specific number of times.
    - Usage
        [3] loop
            ["HelloWorld!"] println
        end
        # HelloWorld!
        # HelloWorld!
        # HelloWorld!

while
    - Execute the following block while the last item in the provided list is true.
    - Usage
        [<t> true] loop
            ["HelloWorld!"] println
            [<t>] [false] =
        end
        # HelloWorld!

for
    - Execute the following block while the count is not equal to the target number.
    - Usage
        [<i> 0 3 1] for
            [<i>] println
        end
        # 1
        # 2
        # 3

defunc
    - Use the cashed user function token to define the starting point of a function.
    - Usage
        $ (test) defunc
            ["HelloWorld!"] println
        end
        [] (test)
        # HelloWorld!

        $ (out) defunc
            print
        end
        ["A" "B" "C"] out
        # ABC

$
    - Cash the next token and skip to the one after it.
    - Usage
        $ (test) exit # Skips the test function call after cashing it and exits the program.

return
    - Return from the function being executed and return a list. If an empty list is provided, no list will be pushed to the stack.
    - Usage
        $ (test) defunc
            ["A"] println
            [] return
            ["B"] println
        end
        [] (test)
        # A

        $ (math) defunc
            + return
            - return
        end
        [1 2 3] (math) println
        # 6

end
    - End a block of code.
    - Usage
        $ (test) defunc
        end

        [3] loop
        end

        [<i> 0 3 1] for
        end

        [True] while
        end

        [True] if
        end

break
    - Break out of a loop.
    - Usage
        [<i> 0 10 1] loop
            [<i>] print
            [<i> 3] == if
                break
            end
        end
        # 123

swap
    - Swap the last 2 elements of the top list on the stack.
    - Usage
        [1 2 3] swap print
        # 132

swap-list
    - Swap the top 2 lists on the stack.
    - Usage
        [1 2 3] [4 5 6] swap-list print
        # 456123

exit
    - Stop the program's execution and exit.
    - Usage
        ["Exit"] println
        exit
        ["Test"] println
        # Exit

