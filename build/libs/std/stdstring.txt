$ (get-length) [<text.local>] defunc
    [<length.local> 0]

    [true] while
        [<text.local>] get {<length.local>} at ?
            break
        end

        [<length.local>] [<length.local> 1] + =
    end

    [<length.local>] get return
end

$ (get-next-token) [<text.local> <start.local> <delim.local>] defunc
    [<result.local> ""]
    [<index.local>] [<start.local>] get merge

    # start at <start.local> - 1, go till <text.local> length, and step by one.
    [<i.local>] [<start.local>] get {1} - [<text.local>] get (get-length) [3] merge-x {1} for
        [<text.local>] get {<i.local>} at ?
            [<index.local>] [<i.local>] get =
            break
        end

        {<c.block>} swap

        [<c.block> <delim.local>] == if
            [<index.local>] [<i.local>] get =
            break
        end

        [<result.local>] [<result.local> <c.block>] + =
    end

    [<text.member>] [<result.local>] get {<index.member>} [<index.local>] get [3] merge-x return
end

$ (tokenize) [<input.local> <delim.local>] defunc
    [<length.local>] [<input.local>] get (get-length) merge
    [<count.local> 0]

    [<current.local> ""] [<length.local>] get dup-x

    [<i.local> -1] [<length.local>] get merge {1} for
        [<input.local>] get [<i.local>] get [<delim.local>] get (get-next-token)
            [<text.member>] get [<current.local> <count.local>] at swap-list =
            [<index.member>] get [<i.local>] swap-list =

        [<count.local>] [<count.local> 1] + =
    end

    [<output.local> ""]
    [""] [<count.local>] get dup-x drop

    [<i.local> -1] [<count.local>] get {1} - merge {1} for
        [<output.local>] at {2 <i.local>} + [<current.local> <i.local>] at get =
    end

    return
end

