$ (get-length) [<text.l>] defunc
    [<length.l> 0]

    [true] while
        [<text.l>] get {<length.l>} at ?
            break
        end

        [<length.l>] [<length.l> 1] + =
    end

    [<length.l>] get return
end

$ (get-next-token) [<text.l> <start.l> <delim.l>] defunc
    [<result.l> ""]
    [<index.l>] [<start.l>] get merge

    # start at <start.l> - 1, go till <text.l> length, and step by one.
    [<i.l>] [<start.l>] get {1} - [<text.l>] get (get-length) [3] merge-x {1} for
        [<text.l>] get {<i.l>} at ?
            [<index.l>] [<i.l>] get =
            break
        end

        {<c.b>} swap

        [<c.b> <delim.l>] == if
            [<index.l>] [<i.l>] get =
            break
        end

        [<result.l>] [<result.l> <c.b>] + =
    end

    [<text.m>] [<result.l>] get {<index.m>} [<index.l>] get [3] merge-x return
end

$ (tokenize) [<input.l> <delim.l>] defunc
    [<length.l>] [<input.l>] get (get-length) merge
    [<count.l> 0]

    [<current.l> ""] [<length.l>] get dup-x

    [<i.l> -1] [<length.l>] get merge {1} for
        [<input.l>] get [<i.l>] get [<delim.l>] get (get-next-token)
            [<text.m>] get [<current.l> <count.l>] at swap-list =
            [<index.m>] get [<i.l>] swap-list =

        [<count.l>] [<count.l> 1] + =
    end

    [<output.l> ""]
    [""] [<count.l>] get dup-x drop

    [<i.l> -1] [<count.l>] get {1} - merge {1} for
        [<output.l>] at {2 <i.l>} + [<current.l> <i.l>] at get =
    end

    return
end

