$ (get-length) [<..text>] defunc
    [<..length> 0]

    [true] while
        [<..text>] get {<..length>} at ?
            break
        end

        [<..length>] [<..length> 1] + =
    end

    drop-list
    
    swap drop return
end

$ (get-next-token) [<..text> <..start> <..delim>] defunc
    [<..result> ""]
    [<..index>] [<..start>] get merge

    # start at <..start> - 1, go till <..text> length, and step by one.
    [<..i>] [<..start>] get {1} - [<..text>] get (get-length) [3] merge-x {1} for
        [<..text>] get {<..i>} at ?
            [<..index>] [<..i>] get =
            break
        end

        [<!c>] [<..text>] get {<..i>} at merge

        [<!c> <..delim>] == if
            [<..index>] [<..i>] get =
            break
        end

        [<..result>] [<..result> <!c>] + =
    end

    [<.text>] [<..result>] get {<.index>} [<..index>] get [3] merge-x return
end

$ (tokenize) [<..input> <..delim>] defunc
    [<..length>] [<..input>] get (get-length) merge
    [<..count> 0]

    [<..current> ""] [<..length>] get dup-x

    [<..i> -1] [<..length>] get merge {1} for
        [<..input>] get [<..i>] get [<..delim>] get (get-next-token)
            [<.text>] get [<..current> <..count>] at swap-list =
            [<.index>] get [<..i>] swap-list =

        [<..count>] [<..count> 1] + =
    end

    [<..output> ""]
    [""] [<..count>] get dup-x drop

    [<..i> -1] [<..count>] get {1} - merge {1} for
        [<..output>] at {2 <..i>} + [<..current> <..i>] at get =
    end

    return
end

