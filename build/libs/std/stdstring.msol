$ (left) [<text.l> <num.l>] defunc
    [<res.l> ""]

    [<i.l>] [<num.l> 1] - [<text.l>] get strlen {1} - {1} [2] merge-x for
        [<res.l>] [<res.l>] [<text.l>] get {<i.l>} at merge + =
    end

    [<res.l>] get return
end

$ (right) [<text.l> <num.l>] defunc
    [<res.l> ""]

    [<i.l> -1] [<text.l>] get strlen {<num.l> 1} - {1} merge for
        [<res.l>] [<res.l>] [<text.l>] get {<i.l>} at merge + =
    end

    [<res.l>] get return
end

$ (get-next-token) [<text.l> <start.l> <delim.l>] defunc
    [<result.l> ""]
    [<index.l>] [<start.l>] get merge

    # start at <start.l> - 1, go till <text.l> length, and step by one.
    [<i.l>] [<start.l> 1] - [<text.l>] get strlen [3] merge-x {1} for
        [<c.b>]
        [<text.l>] get {<i.l>} at ?
            [<index.l>] [<i.l>] get =
            break
        end
        merge

        [<c.b> <delim.l>] == if
            [<index.l>] [<i.l> 1] + =
            break
        end

        [<result.l>] [<result.l> <c.b>] + =
    end

    [<text.m>] [<result.l>] get {<index.m>} [<index.l>] get [3] merge-x return
end

$ (tokenize) [<input.l> <delim.l>] defunc
    [<length.l>] [<input.l>] get strlen merge
    [<count.l> 0]

    [<current.l> ""] [<length.l>] get dup-x

    [<i.l> -1 <length.l> 1] for
        [<input.l>] get [<i.l>] get [<delim.l>] get (get-next-token)
            [<text.m> ""] == if
                continue
            end

            [<text.m>] get [<current.l> <count.l>] at swap-list =
            [<index.m>] get [<i.l>] swap-list =

        [<count.l>] [<count.l> 1] + =
    end

    [<output.l> ""]
    [""] [<count.l>] get dup-x drop

    [<i.l> -1] [<count.l> 1] - merge {1} for
        [<output.l>] at {2 <i.l>} + [<current.l> <i.l>] at get =
    end

    return
end
